// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/redeemed2011/webflowAPI"
	"sync"
)

var (
	lockInterfaceMockGetAllCollections             sync.RWMutex
	lockInterfaceMockGetAllItemsInCollectionByID   sync.RWMutex
	lockInterfaceMockGetAllItemsInCollectionByName sync.RWMutex
	lockInterfaceMockGetAllItemsInCollectionBySlug sync.RWMutex
	lockInterfaceMockGetCollectionByName           sync.RWMutex
	lockInterfaceMockGetCollectionBySlug           sync.RWMutex
	lockInterfaceMockGetItem                       sync.RWMutex
	lockInterfaceMockMethodGet                     sync.RWMutex
)

// Ensure, that InterfaceMock does implement Interface.
// If this is not the case, regenerate this file with moq.
var _ webflowAPI.Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of Interface.
//
//     func TestSomethingThatUsesInterface(t *testing.T) {
//
//         // make and configure a mocked Interface
//         mockedInterface := &InterfaceMock{
//             GetAllCollectionsFunc: func() (*webflowAPI.Collections, error) {
// 	               panic("mock out the GetAllCollections method")
//             },
//             GetAllItemsInCollectionByIDFunc: func(ID string, maxPages int) ([][]byte, error) {
// 	               panic("mock out the GetAllItemsInCollectionByID method")
//             },
//             GetAllItemsInCollectionByNameFunc: func(name string, maxPages int) ([][]byte, error) {
// 	               panic("mock out the GetAllItemsInCollectionByName method")
//             },
//             GetAllItemsInCollectionBySlugFunc: func(slug string, maxPages int) ([][]byte, error) {
// 	               panic("mock out the GetAllItemsInCollectionBySlug method")
//             },
//             GetCollectionByNameFunc: func(name string) (*webflowAPI.Collection, error) {
// 	               panic("mock out the GetCollectionByName method")
//             },
//             GetCollectionBySlugFunc: func(slug string) (*webflowAPI.Collection, error) {
// 	               panic("mock out the GetCollectionBySlug method")
//             },
//             GetItemFunc: func(cName string, cSlug string, cID string, iName string, iID string) ([]byte, error) {
// 	               panic("mock out the GetItem method")
//             },
//             MethodGetFunc: func(uri string, queryParams map[string]string, decodedResponse interface{}) error {
// 	               panic("mock out the MethodGet method")
//             },
//         }
//
//         // use mockedInterface in code that requires Interface
//         // and then make assertions.
//
//     }
type InterfaceMock struct {
	// GetAllCollectionsFunc mocks the GetAllCollections method.
	GetAllCollectionsFunc func() (*webflowAPI.Collections, error)

	// GetAllItemsInCollectionByIDFunc mocks the GetAllItemsInCollectionByID method.
	GetAllItemsInCollectionByIDFunc func(ID string, maxPages int) ([][]byte, error)

	// GetAllItemsInCollectionByNameFunc mocks the GetAllItemsInCollectionByName method.
	GetAllItemsInCollectionByNameFunc func(name string, maxPages int) ([][]byte, error)

	// GetAllItemsInCollectionBySlugFunc mocks the GetAllItemsInCollectionBySlug method.
	GetAllItemsInCollectionBySlugFunc func(slug string, maxPages int) ([][]byte, error)

	// GetCollectionByNameFunc mocks the GetCollectionByName method.
	GetCollectionByNameFunc func(name string) (*webflowAPI.Collection, error)

	// GetCollectionBySlugFunc mocks the GetCollectionBySlug method.
	GetCollectionBySlugFunc func(slug string) (*webflowAPI.Collection, error)

	// GetItemFunc mocks the GetItem method.
	GetItemFunc func(cName string, cSlug string, cID string, iName string, iID string) ([]byte, error)

	// MethodGetFunc mocks the MethodGet method.
	MethodGetFunc func(uri string, queryParams map[string]string, decodedResponse interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// GetAllCollections holds details about calls to the GetAllCollections method.
		GetAllCollections []struct {
		}
		// GetAllItemsInCollectionByID holds details about calls to the GetAllItemsInCollectionByID method.
		GetAllItemsInCollectionByID []struct {
			// ID is the ID argument value.
			ID string
			// MaxPages is the maxPages argument value.
			MaxPages int
		}
		// GetAllItemsInCollectionByName holds details about calls to the GetAllItemsInCollectionByName method.
		GetAllItemsInCollectionByName []struct {
			// Name is the name argument value.
			Name string
			// MaxPages is the maxPages argument value.
			MaxPages int
		}
		// GetAllItemsInCollectionBySlug holds details about calls to the GetAllItemsInCollectionBySlug method.
		GetAllItemsInCollectionBySlug []struct {
			// Slug is the slug argument value.
			Slug string
			// MaxPages is the maxPages argument value.
			MaxPages int
		}
		// GetCollectionByName holds details about calls to the GetCollectionByName method.
		GetCollectionByName []struct {
			// Name is the name argument value.
			Name string
		}
		// GetCollectionBySlug holds details about calls to the GetCollectionBySlug method.
		GetCollectionBySlug []struct {
			// Slug is the slug argument value.
			Slug string
		}
		// GetItem holds details about calls to the GetItem method.
		GetItem []struct {
			// CName is the cName argument value.
			CName string
			// CSlug is the cSlug argument value.
			CSlug string
			// CID is the cID argument value.
			CID string
			// IName is the iName argument value.
			IName string
			// IID is the iID argument value.
			IID string
		}
		// MethodGet holds details about calls to the MethodGet method.
		MethodGet []struct {
			// URI is the uri argument value.
			URI string
			// QueryParams is the queryParams argument value.
			QueryParams map[string]string
			// DecodedResponse is the decodedResponse argument value.
			DecodedResponse interface{}
		}
	}
}

// GetAllCollections calls GetAllCollectionsFunc.
func (mock *InterfaceMock) GetAllCollections() (*webflowAPI.Collections, error) {
	if mock.GetAllCollectionsFunc == nil {
		panic("InterfaceMock.GetAllCollectionsFunc: method is nil but Interface.GetAllCollections was just called")
	}
	callInfo := struct {
	}{}
	lockInterfaceMockGetAllCollections.Lock()
	mock.calls.GetAllCollections = append(mock.calls.GetAllCollections, callInfo)
	lockInterfaceMockGetAllCollections.Unlock()
	return mock.GetAllCollectionsFunc()
}

// GetAllCollectionsCalls gets all the calls that were made to GetAllCollections.
// Check the length with:
//     len(mockedInterface.GetAllCollectionsCalls())
func (mock *InterfaceMock) GetAllCollectionsCalls() []struct {
} {
	var calls []struct {
	}
	lockInterfaceMockGetAllCollections.RLock()
	calls = mock.calls.GetAllCollections
	lockInterfaceMockGetAllCollections.RUnlock()
	return calls
}

// GetAllItemsInCollectionByID calls GetAllItemsInCollectionByIDFunc.
func (mock *InterfaceMock) GetAllItemsInCollectionByID(ID string, maxPages int) ([][]byte, error) {
	if mock.GetAllItemsInCollectionByIDFunc == nil {
		panic("InterfaceMock.GetAllItemsInCollectionByIDFunc: method is nil but Interface.GetAllItemsInCollectionByID was just called")
	}
	callInfo := struct {
		ID       string
		MaxPages int
	}{
		ID:       ID,
		MaxPages: maxPages,
	}
	lockInterfaceMockGetAllItemsInCollectionByID.Lock()
	mock.calls.GetAllItemsInCollectionByID = append(mock.calls.GetAllItemsInCollectionByID, callInfo)
	lockInterfaceMockGetAllItemsInCollectionByID.Unlock()
	return mock.GetAllItemsInCollectionByIDFunc(ID, maxPages)
}

// GetAllItemsInCollectionByIDCalls gets all the calls that were made to GetAllItemsInCollectionByID.
// Check the length with:
//     len(mockedInterface.GetAllItemsInCollectionByIDCalls())
func (mock *InterfaceMock) GetAllItemsInCollectionByIDCalls() []struct {
	ID       string
	MaxPages int
} {
	var calls []struct {
		ID       string
		MaxPages int
	}
	lockInterfaceMockGetAllItemsInCollectionByID.RLock()
	calls = mock.calls.GetAllItemsInCollectionByID
	lockInterfaceMockGetAllItemsInCollectionByID.RUnlock()
	return calls
}

// GetAllItemsInCollectionByName calls GetAllItemsInCollectionByNameFunc.
func (mock *InterfaceMock) GetAllItemsInCollectionByName(name string, maxPages int) ([][]byte, error) {
	if mock.GetAllItemsInCollectionByNameFunc == nil {
		panic("InterfaceMock.GetAllItemsInCollectionByNameFunc: method is nil but Interface.GetAllItemsInCollectionByName was just called")
	}
	callInfo := struct {
		Name     string
		MaxPages int
	}{
		Name:     name,
		MaxPages: maxPages,
	}
	lockInterfaceMockGetAllItemsInCollectionByName.Lock()
	mock.calls.GetAllItemsInCollectionByName = append(mock.calls.GetAllItemsInCollectionByName, callInfo)
	lockInterfaceMockGetAllItemsInCollectionByName.Unlock()
	return mock.GetAllItemsInCollectionByNameFunc(name, maxPages)
}

// GetAllItemsInCollectionByNameCalls gets all the calls that were made to GetAllItemsInCollectionByName.
// Check the length with:
//     len(mockedInterface.GetAllItemsInCollectionByNameCalls())
func (mock *InterfaceMock) GetAllItemsInCollectionByNameCalls() []struct {
	Name     string
	MaxPages int
} {
	var calls []struct {
		Name     string
		MaxPages int
	}
	lockInterfaceMockGetAllItemsInCollectionByName.RLock()
	calls = mock.calls.GetAllItemsInCollectionByName
	lockInterfaceMockGetAllItemsInCollectionByName.RUnlock()
	return calls
}

// GetAllItemsInCollectionBySlug calls GetAllItemsInCollectionBySlugFunc.
func (mock *InterfaceMock) GetAllItemsInCollectionBySlug(slug string, maxPages int) ([][]byte, error) {
	if mock.GetAllItemsInCollectionBySlugFunc == nil {
		panic("InterfaceMock.GetAllItemsInCollectionBySlugFunc: method is nil but Interface.GetAllItemsInCollectionBySlug was just called")
	}
	callInfo := struct {
		Slug     string
		MaxPages int
	}{
		Slug:     slug,
		MaxPages: maxPages,
	}
	lockInterfaceMockGetAllItemsInCollectionBySlug.Lock()
	mock.calls.GetAllItemsInCollectionBySlug = append(mock.calls.GetAllItemsInCollectionBySlug, callInfo)
	lockInterfaceMockGetAllItemsInCollectionBySlug.Unlock()
	return mock.GetAllItemsInCollectionBySlugFunc(slug, maxPages)
}

// GetAllItemsInCollectionBySlugCalls gets all the calls that were made to GetAllItemsInCollectionBySlug.
// Check the length with:
//     len(mockedInterface.GetAllItemsInCollectionBySlugCalls())
func (mock *InterfaceMock) GetAllItemsInCollectionBySlugCalls() []struct {
	Slug     string
	MaxPages int
} {
	var calls []struct {
		Slug     string
		MaxPages int
	}
	lockInterfaceMockGetAllItemsInCollectionBySlug.RLock()
	calls = mock.calls.GetAllItemsInCollectionBySlug
	lockInterfaceMockGetAllItemsInCollectionBySlug.RUnlock()
	return calls
}

// GetCollectionByName calls GetCollectionByNameFunc.
func (mock *InterfaceMock) GetCollectionByName(name string) (*webflowAPI.Collection, error) {
	if mock.GetCollectionByNameFunc == nil {
		panic("InterfaceMock.GetCollectionByNameFunc: method is nil but Interface.GetCollectionByName was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockInterfaceMockGetCollectionByName.Lock()
	mock.calls.GetCollectionByName = append(mock.calls.GetCollectionByName, callInfo)
	lockInterfaceMockGetCollectionByName.Unlock()
	return mock.GetCollectionByNameFunc(name)
}

// GetCollectionByNameCalls gets all the calls that were made to GetCollectionByName.
// Check the length with:
//     len(mockedInterface.GetCollectionByNameCalls())
func (mock *InterfaceMock) GetCollectionByNameCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockInterfaceMockGetCollectionByName.RLock()
	calls = mock.calls.GetCollectionByName
	lockInterfaceMockGetCollectionByName.RUnlock()
	return calls
}

// GetCollectionBySlug calls GetCollectionBySlugFunc.
func (mock *InterfaceMock) GetCollectionBySlug(slug string) (*webflowAPI.Collection, error) {
	if mock.GetCollectionBySlugFunc == nil {
		panic("InterfaceMock.GetCollectionBySlugFunc: method is nil but Interface.GetCollectionBySlug was just called")
	}
	callInfo := struct {
		Slug string
	}{
		Slug: slug,
	}
	lockInterfaceMockGetCollectionBySlug.Lock()
	mock.calls.GetCollectionBySlug = append(mock.calls.GetCollectionBySlug, callInfo)
	lockInterfaceMockGetCollectionBySlug.Unlock()
	return mock.GetCollectionBySlugFunc(slug)
}

// GetCollectionBySlugCalls gets all the calls that were made to GetCollectionBySlug.
// Check the length with:
//     len(mockedInterface.GetCollectionBySlugCalls())
func (mock *InterfaceMock) GetCollectionBySlugCalls() []struct {
	Slug string
} {
	var calls []struct {
		Slug string
	}
	lockInterfaceMockGetCollectionBySlug.RLock()
	calls = mock.calls.GetCollectionBySlug
	lockInterfaceMockGetCollectionBySlug.RUnlock()
	return calls
}

// GetItem calls GetItemFunc.
func (mock *InterfaceMock) GetItem(cName string, cSlug string, cID string, iName string, iID string) ([]byte, error) {
	if mock.GetItemFunc == nil {
		panic("InterfaceMock.GetItemFunc: method is nil but Interface.GetItem was just called")
	}
	callInfo := struct {
		CName string
		CSlug string
		CID   string
		IName string
		IID   string
	}{
		CName: cName,
		CSlug: cSlug,
		CID:   cID,
		IName: iName,
		IID:   iID,
	}
	lockInterfaceMockGetItem.Lock()
	mock.calls.GetItem = append(mock.calls.GetItem, callInfo)
	lockInterfaceMockGetItem.Unlock()
	return mock.GetItemFunc(cName, cSlug, cID, iName, iID)
}

// GetItemCalls gets all the calls that were made to GetItem.
// Check the length with:
//     len(mockedInterface.GetItemCalls())
func (mock *InterfaceMock) GetItemCalls() []struct {
	CName string
	CSlug string
	CID   string
	IName string
	IID   string
} {
	var calls []struct {
		CName string
		CSlug string
		CID   string
		IName string
		IID   string
	}
	lockInterfaceMockGetItem.RLock()
	calls = mock.calls.GetItem
	lockInterfaceMockGetItem.RUnlock()
	return calls
}

// MethodGet calls MethodGetFunc.
func (mock *InterfaceMock) MethodGet(uri string, queryParams map[string]string, decodedResponse interface{}) error {
	if mock.MethodGetFunc == nil {
		panic("InterfaceMock.MethodGetFunc: method is nil but Interface.MethodGet was just called")
	}
	callInfo := struct {
		URI             string
		QueryParams     map[string]string
		DecodedResponse interface{}
	}{
		URI:             uri,
		QueryParams:     queryParams,
		DecodedResponse: decodedResponse,
	}
	lockInterfaceMockMethodGet.Lock()
	mock.calls.MethodGet = append(mock.calls.MethodGet, callInfo)
	lockInterfaceMockMethodGet.Unlock()
	return mock.MethodGetFunc(uri, queryParams, decodedResponse)
}

// MethodGetCalls gets all the calls that were made to MethodGet.
// Check the length with:
//     len(mockedInterface.MethodGetCalls())
func (mock *InterfaceMock) MethodGetCalls() []struct {
	URI             string
	QueryParams     map[string]string
	DecodedResponse interface{}
} {
	var calls []struct {
		URI             string
		QueryParams     map[string]string
		DecodedResponse interface{}
	}
	lockInterfaceMockMethodGet.RLock()
	calls = mock.calls.MethodGet
	lockInterfaceMockMethodGet.RUnlock()
	return calls
}
